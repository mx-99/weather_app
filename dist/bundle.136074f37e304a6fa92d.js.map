{"version":3,"file":"bundle.136074f37e304a6fa92d.js","mappings":"mBAAO,SAASA,EAAaC,GACLC,SAASC,eAAe,gBAChCC,UAAY,qCAAqCH,SACjE,CCCOI,eAAeC,EAAoBC,GACtC,IACI,IAAKA,IAAYA,EAAQC,kBACrB,MAAM,IAAIC,MAAM,sCAGpB,MAAMC,EAAe,CACjBC,KAAMJ,EAAQK,iBAAmB,mBACjCC,KAAMN,EAAQC,kBAAkBK,MAAQ,MACxCC,YAAaP,EAAQO,aAAe,iBACpCC,SAAUR,EAAQQ,UAAY,UAC9BC,SAAUT,EAAQS,UAAY,MAC9BC,UAAWV,EAAQU,WAAa,MAChCT,kBAAmB,CACfU,SAAUX,EAAQC,kBAAkBU,UAAY,MAChDC,WAAYZ,EAAQC,kBAAkBW,YAAc,gBACpDC,SAAUb,EAAQC,kBAAkBY,UAAY,MAChDC,UAAWd,EAAQC,kBAAkBa,WAAa,QAK1D,OAFAC,QAAQC,IAAIb,GCxBb,SAA6Bc,GAChC,MAAMC,EAAcvB,SAASC,eAAe,gBAExCqB,EAAKvB,MACLwB,EAAYrB,UAAY,qCAAqCoB,EAAKvB,cAKtEwB,EAAYrB,UAAY,qIAKNoB,EAAKb,6GAILa,EAAKX,+GAILW,EAAKV,iHAILU,EAAKT,8GAILS,EAAKR,+GAILQ,EAAKP,kMAQLO,EAAKhB,kBAAkBU,gHAIvBM,EAAKhB,kBAAkBW,gHAIvBK,EAAKhB,kBAAkBY,gHAIvBI,EAAKhB,kBAAkBa,gEAI7C,CDjCQK,CAAoBhB,GACbA,CACX,CAAE,MAAOT,GAGL,OAFAD,EAAa,8CAA8CC,KAC3DqB,QAAQrB,MAAM,6CAA8CA,GACrD,CAAEA,MAAOA,EAAM0B,QAC1B,CACJ,CEhCO,SAASC,IAEZ,OADe1B,SAASC,eAAe,YACvB0B,MAAMC,OAAOC,aACjC,CCFO1B,eAAe2B,EAAWC,GAE7B,IAAKA,EAAU,CACX,MAAMC,EAAiB,CACnB,QAAS,SAAU,QAAS,gBAAiB,SAC7C,YAAa,QAAS,UAAW,iBAAkB,SAGvDD,EAAWC,EADSC,KAAKC,MAAMD,KAAKE,SAAWH,EAAeI,QAElE,CAEA,IACI,MAAMC,QAAiBC,MAAM,uFAAuFP,kCAA0C,CAAEQ,KAAM,SAEtK,IAAKF,EAASG,GACV,MAAM,IAAIjC,MAAM,+BAIpB,aADmB8B,EAASI,MAEhC,CAAE,MAAO1C,GAGL,OAFAD,EAAa,2BAA2BC,EAAM0B,WAC9CL,QAAQC,IAAI,iDAAiDtB,EAAM0B,WAC5D,IACX,CACJ,CCrBAzB,SAAS0C,iBAAiB,oBAAoB,KAC1C,MAAMC,EAAM3C,SAASC,eAAe,OAGpC,IAAI8B,EAAWL,IACVK,IACDA,OAAWa,GAIVb,GACDD,IAAae,MAAKvB,IACVA,GACAlB,EAAoBkB,EACxB,IACDwB,OAAM/C,IACLqB,QAAQC,IAAI,0BAA2BtB,EAAM,IAKrD4C,EAAID,iBAAiB,SAAUK,IAC3BA,EAAMC,iBACNjB,EAAWL,IACNK,IACDA,OAAWa,GAEfd,EAAWC,GAAUc,MAAKvB,IAClBA,GACAlB,EAAoBkB,EACxB,IACDwB,OAAM/C,IACLqB,QAAQC,IAAI,0BAA2BtB,EAAM,GAC/C,GACJ,G","sources":["webpack://webpack-practice/./src/errorHandler.js","webpack://webpack-practice/./src/extractRequiredData.js","webpack://webpack-practice/./src/displayLocationInfo.js","webpack://webpack-practice/./src/getLocationFromUser.js","webpack://webpack-practice/./src/getWeather.js","webpack://webpack-practice/./src/index.js"],"sourcesContent":["export function errorHandler(error) {\n    const weatherInfo = document.getElementById(\"weather-info\");\n    weatherInfo.innerHTML = `<div class=\"error-message\">Error: ${error}</div>`;\n}","import { displayLocationInfo } from \"./displayLocationInfo\";\nimport { errorHandler } from \"./errorHandler\";\n\n\nexport async function extractRequiredData(apidata) {\n    try {\n        if (!apidata || !apidata.currentConditions) {\n            throw new Error(\"Incomplete data received from API.\");\n        }\n\n        const requiredData = {\n            area: apidata.resolvedAddress || \"Unknown location\",\n            temp: apidata.currentConditions.temp || \"N/A\",\n            description: apidata.description || \"No description\",\n            timezone: apidata.timezone || \"Unknown\",\n            latitude: apidata.latitude || \"N/A\",\n            longitude: apidata.longitude || \"N/A\",\n            currentConditions: {\n                datetime: apidata.currentConditions.datetime || \"N/A\",\n                conditions: apidata.currentConditions.conditions || \"No conditions\",\n                humidity: apidata.currentConditions.humidity || \"N/A\",\n                windspeed: apidata.currentConditions.windspeed || \"N/A\",\n            },\n        };\n        console.log(requiredData);\n        displayLocationInfo(requiredData)\n        return requiredData;\n    } catch (error) {\n        errorHandler(`Error fetching or processing weather data: ${error}`)\n        console.error(\"Error fetching or processing weather data:\", error);\n        return { error: error.message };\n    }\n}\n","export function displayLocationInfo(data) {\n    const weatherInfo = document.getElementById(\"weather-info\");\n\n    if (data.error) {\n        weatherInfo.innerHTML = `<div class=\"error-message\">Error: ${data.error}</div>`;\n        return;\n    }\n\n    // Populate the weatherInfo element with the required data using a table\n    weatherInfo.innerHTML = `\n        <h2>Weather Information</h2>\n        <table>\n            <tr>\n                <th>Location</th>\n                <td>${data.area}</td>\n            </tr>\n            <tr>\n                <th>Temperature</th>\n                <td>${data.temp}Â°C</td>\n            </tr>\n            <tr>\n                <th>Description</th>\n                <td>${data.description}</td>\n            </tr>\n            <tr>\n                <th>Timezone</th>\n                <td>${data.timezone}</td>\n            </tr>\n            <tr>\n                <th>Latitude</th>\n                <td>${data.latitude}</td>\n            </tr>\n            <tr>\n                <th>Longitude</th>\n                <td>${data.longitude}</td>\n            </tr>\n        </table>\n        \n        <h3>Current Conditions:</h3>\n        <table>\n            <tr>\n                <th>Datetime</th>\n                <td>${data.currentConditions.datetime}</td>\n            </tr>\n            <tr>\n                <th>Conditions</th>\n                <td>${data.currentConditions.conditions}</td>\n            </tr>\n            <tr>\n                <th>Humidity</th>\n                <td>${data.currentConditions.humidity}%</td>\n            </tr>\n            <tr>\n                <th>Windspeed</th>\n                <td>${data.currentConditions.windspeed} km/h</td>\n            </tr>\n        </table>\n    `;\n}\n","export function getLocationFromUser(){\n    let location = document.getElementById('location');\n    return location.value.trim().toLowerCase(); \n}\n","import { errorHandler } from \"./errorHandler\";\nexport async function getWeather(location) {\n    // If location is undefined or empty, use a random location\n    if (!location) {\n        const randomLocation = [\n            \"Accra\", \"Moscow\", \"Tokyo\", \"New York City\", \"Sydney\",\n            \"Cape Town\", \"Lagos\", \"Nairobi\", \"Rio de Janeiro\", \"Cairo\"\n        ];\n        const citiesIndex = Math.floor(Math.random() * randomLocation.length);\n        location = randomLocation[citiesIndex];\n    }\n\n    try {\n        const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}?key=FTRT7DE4HGYMP8S8V6G95NNFP`, { mode: 'cors' });\n\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n        return data; \n    } catch (error) {\n        errorHandler(`Error fetching weather: ${error.message}`);\n        console.log(`There was a problem with the fetch operation: ${error.message}`);\n        return null; \n    }\n}\n","import { extractRequiredData } from \"./extractRequiredData\";\nimport { getLocationFromUser } from \"./getLocationFromUser\";\nimport { getWeather } from \"./getWeather\";\nimport './styles.css'; \n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const btn = document.getElementById('btn');\n\n    // Check for a previously entered location or fall back to random location\n    let location = getLocationFromUser();\n    if (!location) {\n        location = undefined;  // If no location is entered, use random location\n    }\n\n    // If there's no location from the input, load random location's weather\n    if (!location) {\n        getWeather().then(data => {\n            if (data) {\n                extractRequiredData(data); \n            }\n        }).catch(error => {\n            console.log(\"Error fetching weather:\", error);\n        });\n    }\n\n    // Handle form submission (location entry from user)\n    btn.addEventListener('click', (event) => {\n        event.preventDefault(); \n        location = getLocationFromUser();\n        if (!location) {\n            location = undefined;  // If no location input, fallback to random\n        }\n        getWeather(location).then(data => {\n            if (data) {\n                extractRequiredData(data); \n            }\n        }).catch(error => {\n            console.log(\"Error fetching weather:\", error);\n        });\n    });\n});\n\n"],"names":["errorHandler","error","document","getElementById","innerHTML","async","extractRequiredData","apidata","currentConditions","Error","requiredData","area","resolvedAddress","temp","description","timezone","latitude","longitude","datetime","conditions","humidity","windspeed","console","log","data","weatherInfo","displayLocationInfo","message","getLocationFromUser","value","trim","toLowerCase","getWeather","location","randomLocation","Math","floor","random","length","response","fetch","mode","ok","json","addEventListener","btn","undefined","then","catch","event","preventDefault"],"sourceRoot":""}